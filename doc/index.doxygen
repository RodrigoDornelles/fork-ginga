/*! \mainpage Preface and License

\author Guilherme F. Lima <gflima@telemidia.puc-rio.br>
<!-- Include another author: \author Foo Bar <foo@bar> -->

# Preface

%Ginga is the reference implementation of the Brazilian iTV middleware.  The
workhorse of %Ginga is a C++ library called \e libginga.  This document
describes the architecture of libginga and its external and internal APIs.

# Documentation License

Copyright (C) 2018 PUC-Rio/Laboratorio TeleMidia

Permission is granted to copy, distribute and/or modify this document under
the terms of the GNU Free Documentation License, Version 1.3 or any later
version published by the Free Software Foundation; with no Invariant
Sections, with no Front-Cover Texts, and with no Back-Cover Texts. A copy of
the license is included in the "GNU Free Documentation License" file as part
of this distribution.

# Libginga APIs

What we call the *external API* is the interface exposed by libginga to
application programmers.  The external API is contained in a single header
file, ginga.h, which is installed together with the library.

What we call the *internal API* is the set of components and interfaces used
internally by libginga.  The internal API is not exposed to application
programmers and should only be used by programmers that want to modify
libginga itself.

## Links

  - Page \ref extapi describes libginga external API.

  - Page \ref intapi describes libginga architecture and its internal API.

  - Page \ref devel describes the guidelines for contributing to %Ginga.

<!-- ------------------------------------------------------------------- -->
\page extapi External API

# %Ginga as an NCL %Player

Libginga external API is the library public interface.  It can used by
application programmers to build iTV players that reproduce NCL files.  An
NCL (Nested %Context Language) file is an XML file that specifies an
interactive multimedia presentation.  For more information about %Ginga (the
standard) and NCL (the language) see http://ginga.org.br and
http://ncl.org.br.

Along with libginga, the %Ginga distribution comes with four programs that
use libginga external API to play NCL files:

 1. src/ginga.cpp: A <a href="https://www.gtk.org/">GTK+</a>-based
    command-line player.

 2. src/ginga-qt.cpp: A <a href="https://www.qt.io/">Qt</a>-based
    command-line player.

 3. src/ginga-gl.cpp: An experimental command-line player
    based on <a href="https://www.libsdl.org/">SDL</a> and
    <a href="https://www.opengl.org/">OpenGL</a>.

 4. src-gui/ginga-gtk.cpp: A full-fledged GUI player based on <a
    href="https://www.gtk.org/">GTK+</a>

# External API Overview

Libginga external API consists of a single header file, ginga.h, containing
the class Ginga.  A Ginga object represents an NCL player (also called \e
formatter).  Multiple Ginga instances can coexist within the same program.
The external API is fully reentrant but not thread-safe.

To play an NCL file, after creating a Ginga object using Ginga::create, the
program must call Ginga::start with the path of the file.  The Ginga::start
call parses the given file and bootstraps the presentation.  When the call
returns, the presentation is assumed to be at time 0.  From this point on,
the program that is using libginga should:

  1. Capture the keys pressed by the user and send them to the presentation
     via Ginga::sendKey.

  2. From time to time, advance the presentation time by sending ticks via
     Ginga::sendTick.

  3. Whenever necessary, draw the latest frame of the presentation via
     Ginga::redraw.

The program can use Ginga::stop to stop the presentation or use
Ginga::getState to detect its natural end (some NCL presentations eventually
terminate).  After the Ginga object is stopped, the previous presentation
state is lost and the same object can be used to play another file.

Some control options (GingaOptions) can be set on the Ginga object when it
is created.  Most of these option can also be changed later via
Ginga::setOption* calls.  The set options are preserved even after the
presentation is stopped.

<!-- ------------------------------------------------------------------- -->
\page intapi Architecture and Internal API

# Architecture

\image html arch.png

# Internal API

<!-- ------------------------------------------------------------------- -->
\page devel Development

# Where's the source?

The code repository is on GitHub: https://github.com/TeleMidia/ginga.

# Contributing

%Ginga is free-software.  Help is always welcomed.  A good starting-point
for new contributors is the <a
href="https://github.com/TeleMidia/ginga">issues page</a> on %Ginga's
GitHub.  Fell free to contact us on info@telemidia.puc-rio.br.

# Bug Reporting

Bugs should be reported on the <a
href="https://github.com/TeleMidia/ginga">issues page</a> on %Ginga's
GitHub.  When reporting bugs, try to be as clear as possible and to keep one
bug per report.  We recommend adopting the style of the <a
href="https://bugzilla.gnome.org/page.cgi?id=bug-writing.html">GNOME
guidelines</a> for bug reporting.

# Best Practices

When hacking %Ginga, to keep the code in shape, *be sure to consider the
following practices*.

## Good Habits

  - Configure the project with debugging and warnings enabled.

        $ ./configure --enable-debug --enable-warnings

  - Except when writing tests, *don't* use libginga internal API outside the
    library.  That is, programs should only include ginga.h.

  - Before reinventing the wheel, check out aux-ginga.h for auxiliary
    functions.

  - Keep the inclusions in the global headers sorted alphabetically.

  - Use GLib assertions as much as possible to check for erroneous
    conditions.

## Coding Standards and Style

  - Read <a href="http://www.gnu.org/prep/standards/standards.html">the GNU
    coding standards</a>.  We try to follow this document as much as
    possible, including the coding-style, which we adapted to C++11.

  - Be sure to write good Git commit messages.  Read <a
    href="https://chris.beams.io/posts/git-commit">the seven rules of a
    great Git commit message</a>.

  - Avoid tabs and trailing whitespace, check your editor settings.

  - Use "-" instead of "_" as word separators in file names.

# Repository Structure

The repository of %Ginga consists of the following directories.

  - build-aux: Auxiliary build scripts and macros for Autotools.
  - build-cmake: Configuration for CMake build.
  - debian: Configuration for Debian distribution.
  - doc: Documentation.
  - examples: Complete NCL examples.
  - extra: Extra stuff.
  - lib: The libginga sources.
  - src: The sources of the command-line players.
  - src-gui: The sources of the GUI player.
  - tests: Automated tests.
  - tests-ncl: NCL test files.

# Team

The current core maintainers of %Ginga are:

| Name              | Affiliation        | E-Mail                            |
| ----------------- | ------------------ | --------------------------------- |
| Álan Lívio        | PUC-Rio, TeleMídia | alan@telemidia.puc-rio.br         |
| Guilherme F. Lima | PUC-Rio, TeleMídia | gflima@telemidia.puc-rio.br       |
| Roberto Azevedo   | PUC-Rio, TeleMídia | robertogerson@telemidia.puc-rio.br|

See the <a href="https://github.com/TeleMidia/ginga/graphs/contributors">
contributors page</a> on %Ginga's GitHub for the full list of contributors.

*/
